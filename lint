#!/bin/bash

# lint
# ====

# Print linting issues with files

# Constants
# ---------
readonly RED_FG=$(tput setaf 1)
readonly RESET_COLOR=$(tput sgr0)

# Functions
# ---------

# ### usage

# Prints the usage info for this script.
# Outputs
#   Writes the usage info to stdout
usage() {
  cat <<'USAGE'
usage: lint [--help | -h]
       lint [-d=dir] file ...

OPTIONS
  -h, --help       Show this help message
  -d               Base directory all file paths are relative to

EXAMPLES
  Lint all the files in the current directory, excluding any .git directories.

  find . -type d -name .git -prune -o -type f -print0 | xargs -0 lint

  Lint all the files that are added, modified, or renamed in the index,
  and where the working directory matches the index.

  git status -z --porcelain | grep -z '^[AMR] ' | cut -z -b 4- \
    | xargs -0 lint -d "$(git rev-parse --show-toplevel)"
USAGE
}

# Parse args
# ----------

# getopt will return a string containing quoted options and parameters
parsed_args="$(getopt -n lint -o hd: -l help -- "$@")"
getopt_result="$?"

# Show usage if getopt failed to parse the arguments
if [[ ${getopt_result} -ne 0 ]]; then
  usage
  exit "${getopt_result}"
fi

# Set $1...$n to the quoted strings inside $parsed_args
eval set -- "${parsed_args}"

# Process the options
base_dir='./'

while :
do
  case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -d)
      base_dir="$2"
      shift 2
      ;;
    # This is the last option, the rest of $parsed_args is parameters
    --)
      shift
      break
      ;;
  esac
done

# Lint files
# ----------
for file in "$@"; do
  path="${base_dir}/${file}"

  # Process a file
  if [[ -f "${path}" ]]; then
    # Trailing whitespace
    grep -m 1 '\s\+$' "${path}" 1> /dev/null \
      && printf "${RED_FG}tws${RESET_COLOR} %s\n" "${path}"

    # Tabs
    grep -m 1 $'\t' "${path}" 1> /dev/null \
      && printf "${RED_FG}tab${RESET_COLOR} %s\n" "${path}"

    # Trailing blank lines
    read num_tbl < <(tail -n 2 "${path}" | grep -c -m 2 '^$')

    if [[ "${num_tbl}" -eq 0 ]]; then
      printf "${RED_FG}nbl${RESET_COLOR} %s\n" "${path}"
    elif [[ "${num_tbl}" -gt 1 ]]; then
      printf "${RED_FG}mbl${RESET_COLOR} %s\n" "${path}"
    fi

  elif [[ ! -e "${path}" ]]; then
    printf "${RED_FG}ne ${RESET_COLOR} %s\n" "${path}"

  elif [[ -d "${path}" ]]; then
    printf "${RED_FG}dir${RESET_COLOR} %s\n" "${path}"

  # Don't process any other types of files
  else
    printf "${RED_FG}skp${RESET_COLOR} %s\n" "${path}"
  fi
done

