#!/bin/bash
#
# Lints a list of file

################################################################################
# Prints the usage info for this script.
# Outputs
#   Writes the usage info to stdout
################################################################################
usage() {
  printf 'usage:\n'
  printf '  lint [--help | -h]\n'
  printf '  lint file1 [file2...]\n'
  printf '  lint [-d] dir1 [dir2...]\n'
}

# getopt will return a string containing quoted options and parameters
parsed_args="$(getopt -n lint -o h -l help -- "$@")"
getopt_result="$?"

# Show usage if getopt failed to parse the arguments
if [[ ${getopt_result} -ne 0 ]]; then
  usage
  exit "${getopt_result}"
fi

# Set $1...$n to the quoted strings inside $parsed_args
eval set -- "${parsed_args}"

# Process the options
while :
do
  case "$1" in
    -h | --help)
      usage
      exit 0;;
    # This is the last option, the rest of $parsed_args is parameters
    --)
      shift
      break ;;
  esac
done

# If no parameters, call the script on the current directory
if [[ "$#" -eq 0 ]]; then
  $0 .
  exit "$?"
fi

################################################################################
# Prints a linting error if the file is missing a trailing blank line,
# or has more than one trailing blank line.
# Arguments
#   The number of trailing blank lines on stdin
# Outputs
#   Writes a linting error to stdout if the number of trailing blank lines
#   is not 1
################################################################################
check_trailing_blank_lines() {
  mapfile -t stdin_args
  n="${stdin_args[0]}"

  if [[ "$n" -eq 0 ]]; then
    printf "${RED_FG}nbl${RESET_COLOR} %s\n" "${item}"
  elif [[ "$n" -gt 1 ]]; then
    printf "${RED_FG}mbl${RESET_COLOR} %s\n" "${item}"
  fi
}

for item in "$@"; do
  # Process a file
  if [[ -f "${item}" ]]; then
    # Trailing whitespace
    grep -m 1 '\s\+$' "${item}" 1> /dev/null \
      && printf "${RED_FG}tws${RESET_COLOR} %s\n" "${item}"

    # Tabs
    grep -m 1 $'\t' "${item}" 1> /dev/null \
      && printf "${RED_FG}tab${RESET_COLOR} %s\n" "${item}"

    # No trailing blank line
    tail -n 2 "${item}" | grep -c -m 2 '^$' \
      | check_trailing_blank_lines
  # Process a directory by calling the script recursively on all the files
  # in the directory, excluding .git directories and .swp files
  elif [[ -d "${item}" ]]; then
    find "${item}" -type f -not -path '*/.git/*' -not -name '*.swp' -print0 \
      | xargs -0 "$0"
  fi
done

